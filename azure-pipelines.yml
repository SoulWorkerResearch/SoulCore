# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

- task: UseGitVersion@5
  displayName: 'GitVersion'
  inputs:
    updateAssemblyInfo: true
    versionSpec: '5.x'

- script: echo %Action%%BuildVersion%
  displayName: 'Set build version'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: $(GitVersion.SemVer)

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build $(buildConfiguration)'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test $(buildConfiguration)'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish $(buildConfiguration)'
  inputs:
    command: 'publish'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True

- task: CopyPublishBuildArtifacts@1
  inputs:
    Contents: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    ArtifactType: Container

# ---

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '**/*.csproj'
#     arguments: '--configuration $(buildConfiguration)' 
#     publishWebProjects: false

# ---

# - task: DotNetCoreCLI@2
#   inputs:
#     command: publish
#     publishWebProjects: false
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     zipAfterPublish: True

# - task: NuGetCommand@2
#   inputs:
#     command: push
#     nuGetFeedType: external
#     publishFeedCredentials: 'SoulCore'
#     versioningScheme: 'byEnvVar'
#     versionEnvVar: 'version'

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'NuGetPackage'

# ---

# - task: DotNetCoreCLI@2
#   displayName: 'Install gitversion'
#   inputs:
#     command: 'custom'
#     custom: 'tool'
#     arguments: 'install -g gitversion.tool'

# - task: DotNetCoreCLI@2
#   displayName: 'Gitversion setup'
#   inputs:
#     command: 'custom'
#     custom: 'gitversion'
#     arguments: '/output buildserver'

# - task: GitVersion@5
#   inputs:
#     preferBundledVersion: false
#     updateAssemblyInfo: true


# - script: echo %Action%%BuildVersion%
#   displayName: 'Set build version'
#   env:
#     Action: '##vso[build.updatebuildnumber]'
#     BuildVersion: $(GitVersion.SemVer)

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#     maximumCpuCount: true
#     msbuildArchitecture: 'x64'

# - task: NuGetCommand@2
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/*.csproj'
#     versioningScheme: 'byEnvVar'
#     versionEnvVar: 'BUILD_BUILDNUMBER'
#     includeSymbols: false

# - task: NuGetCommand@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'fbe1e4df-4cdb-4b29-8ffd-d68560e51313/d2d3e915-1761-4239-8f24-f57ef541e6f7'
#     allowPackageConflicts: true