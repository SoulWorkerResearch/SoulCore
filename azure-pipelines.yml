# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: UseDotNet@2
  inputs:
    version: '5.0.x'
    includePreviewVersions: true # Required for preview versions

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' 
    publishWebProjects: false


- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

- task: NuGetCommand@2
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'SoulCore'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'version'

# - task: PublishBuildArtifacts@1
#   inputs:
#     pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'NuGetPackage'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
#     maximumCpuCount: true
#     msbuildArchitecture: 'x64'

# - task: NuGetCommand@2
#   inputs:
#     command: 'pack'
#     packagesToPack: '**/*.csproj'
#     versioningScheme: 'byEnvVar'
#     versionEnvVar: 'BUILD_BUILDNUMBER'
#     includeSymbols: true

# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'NuGetPackage'
#     publishLocation: 'Container'

# - task: DownloadPipelineArtifact@2
#   inputs:
#     buildType: 'current'
#     artifactName: 'NuGetPackage'
#     itemPattern: '**'
#     targetPath: '$(Pipeline.Workspace)'

# - task: NuGetCommand@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
#     nuGetFeedType: 'internal'
#     publishVstsFeed: 'fbe1e4df-4cdb-4b29-8ffd-d68560e51313/d2d3e915-1761-4239-8f24-f57ef541e6f7'
#     allowPackageConflicts: true

# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       ls $(Build.ArtifactStagingDirectory)
#       'nuget push ${Build.ArtifactStagingDirectory}/${Build.DefinitionName}.${Year:yyyy}.${Month}.${DayOfMonth}.${Rev:.r}.nupkg -ApiKey ${myNuGetApiKey} -Source https://api.nuget.org/v3/index.json'
#     pwsh: true

# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: 'nuget push ${Build.ArtifactStagingDirectory}/${Build.DefinitionName}.${Year:yyyy}.${Month}.${DayOfMonth}.${Rev:.r}.symbols.nupkg -ApiKey ${myNuGetApiKey} -Source https://api.nuget.org/v3/index.json'
#     pwsh: true

# - task: NuGetCommand@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#     nuGetFeedType: 'external'
#     externalFeedCredentials: 'SoulCore'
#     externalEndpoint: 'SoulCore'